global ignore_frames = 0

def load_bas(path) {
    try {
        basfile = BASFile(path)
        if (basfile.size() > 0) {
            /* Прицепляем перехватчик вызова загрузки байта */
            attach_bas25_hook()
            basfile.next = 1
            basfile.onfinished =
            fun(next) {
                //detach_bas25_hook()
                //finalize()
                attach_expect_hook()
            }
        }
        else {
            puts("load_bas: failed to load BAS " + to_string(path))
            ignore_frames = 100
        }
    } catch(e) {
        puts("load_bas: error loading " + path + ": " + e.what());
    }
}

def load_cas(path) {
    try {
        var contents = read_file(path)
        if (contents.size() > 0) {
            /* Прицепляем перехватчик вызова загрузки байта */
            attach_bas25_hook()

            basfile = BufferStream(contents)
            puts("load_cas: size=" + to_string(contents.size()))
            basfile.next = 1
            basfile.onfinished = 
                fun(next) {
                    //detach_bas25_hook()
                    //finalize()
                    attach_expect_hook()
                }
        }
        else {
            puts("load_cas: failed to load CAS " + to_string(path))
            ignore_frames = 100
        }
    } catch(e) {
        puts("load_bas: error loading " + path + ": " + e.what());
    }
}

def on_load_file_dialog_result(path)
{
    puts("on_load_file_dialog_result: path=" + path)
    /* Прицепляем перехватчик вызова загрузки байта */
    /* Подгружаем первый файл */
    var file = to_string(path)
    if (ends_with(file.toUpperCase(), ".BAS")) {
        load_bas(path)
    }
    else if (ends_with(file.toUpperCase(), ".CAS")) {
        load_cas(path)
    }
    else {
        puts("on_load_file_dialog_result: unknown file type ignored")
        ignore_frames = 100
    }
    script_continue()
}

// first intercept of load byte
def open_load_dialog(dummy) {
    if (ignore_frames == 0 && check_signature(0x2b05, signature_2b05)) {
        puts("open_load_dialog called")
        open_file_dialog("", "read")
        // will pause in script break until resumed by SetFileDialogResult
        add_callback_string("on_file_dialog_result", on_load_file_dialog_result)
    }
    else {
        script_continue()
    }
}

/* Эта функция выполняется каждый кадр, callback "frame" */
def framefunc(frameno) {
    keytyper.onframe()  // дать роботу-машинисту сделать свое дело
    if (ignore_frames > 0) {
      --ignore_frames;
    }
}

/* Зарегистрировать кадровый колбек */
add_callback("frame", framefunc)

def ends_with(str, tail) 
{
    return str.rfind(tail) == str.size() - tail.size()
}

def attach_expect_hook()
{
    // open file dialog on hook
    insert_breakpoint(0, 0x2b05, 1) // load byte (see also 0xfb74 for load file)
    add_callback("breakpoint", open_load_dialog)
    script_attached()
    script_continue()
    puts("added load callback to open_load_dialog")
}

if (scriptargs.size() < 1) {
    attach_expect_hook()
}
else {
    /* Подгружаем первый файл */
    var file = scriptargs[0]
    if (ends_with(file.toUpperCase(), ".BAS")) {
        load_bas(scriptargs[0])
    }
    else if (ends_with(file.toUpperCase(), ".CAS")) {
        load_cas(scriptargs[0])
    }
    else {
        detach_bas25_hook()
        finalize()
    }

    if (!check_signature(0x2b05, signature_2b05)) {
        //puts("BASIC2.5 seems to be already loaded")
        keytyper.types([
            "\001F3", "F11", 50, "\002F3", 50])
    }

    keytyper.types([
        "F12", 50,
        "C","L","O","A","D","\001Left Shift","2","2","\002Left Shift","Return"])
}
