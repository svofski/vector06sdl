def load_bas() {
    basfile = BASFile(scriptargs[0])
    basfile.next = 1
    basfile.onfinished =
        fun(next) {
          detach_bas25_hook()
          finalize()
        }
}

def load_cas() {
    var contents = read_file(scriptargs[0])
    basfile = BufferStream(contents)
    print("load_cas: size=" + to_string(contents.size()))
    basfile.next = 1
    basfile.onfinished = 
        fun(next) {
            detach_bas25_hook()
            finalize()
        }
}

/* Эта функция выполняется каждый кадр, callback "frame" */
def framefunc(frameno) {
    keytyper.onframe()  // дать роботу-машинисту сделать свое дело
}

/* Зарегистрировать кадровый колбек */
add_callback("frame", framefunc)

def ends_with(str, tail) 
{
    return str.rfind(tail) == str.size() - tail.size()
}

if (scriptargs.size() < 1) {
    puts("Specify --scriptargs PROGRAM.BAS\n")
}
else {
    /* Прицепляем перехватчик вызова загрузки байта */
    attach_bas25_hook()
    /* Подгружаем первый файл */
    var file = scriptargs[0]
    if (ends_with(file.toUpperCase(), ".BAS")) {
        load_bas()
    }
    else if (ends_with(file.toUpperCase(), ".CAS")) {
        load_cas()
    }
    else {
        detach_bas25_hook()
        finalize()
    }
    keytyper.types([
        "\001F3", "F11", 50, "\002F3", 50, "F12", 50,
        "C","L","O","A","D","\001Left Shift","2","2","\002Left Shift","Return"])
}
