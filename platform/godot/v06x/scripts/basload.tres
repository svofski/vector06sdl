def load_bas(path) {
    try {
        basfile := BASFile(path)
        if (basfile.size() > 0) {
            basfile.next = 1
            basfile.onfinished =
                fun(next) {
                    puts("load_bas finished")
                    basfile_loaded = false
                }
            basfile_loaded = true
            puts("load_bas: basfile loaded")
        }
        else {
            puts("load_bas: failed to load BAS " + to_string(path))
        }
    } catch(e) {
        puts("load_bas: error loading " + path + ": " + e.what());
    }
}

def load_cas(path) {
    try {
        var contents = read_file(path)
        if (contents.size() > 0) {
            basfile := BufferStream(contents)
            puts("load_cas: size=" + to_string(contents.size()))
            basfile.next = 1
            basfile.onfinished = 
                fun(next) {
                    puts("load_cas finished")
                    basfile_loaded = false
                }
            basfile_loaded = true
            puts("load_cas: casfile loaded")
        }
        else {
            puts("load_cas: failed to load CAS " + to_string(path))
        }
    } catch(e) {
        puts("load_cas: error loading " + path + ": " + e.what());
    }
}

def on_load_file_dialog_result(path)
{
    puts("on_load_file_dialog_result: path=" + path)
    /* Прицепляем перехватчик вызова загрузки байта */
    /* Подгружаем первый файл */
    var file = to_string(path)
    if (ends_with(file.toUpperCase(), ".BAS")) {
        load_bas(path)
    }
    else if (ends_with(file.toUpperCase(), ".CAS")) {
        load_cas(path)
    }
    else {
        puts("will try to assign basfile")
        basfile := BufferStream([])
        puts("did it work?")
        basfile_loaded = true // set it to true to prevent dialog spam
        puts("on_load_file_dialog_result: unknown file type ignored")
    }
    script_continue()
}

// first intercept of load byte
def open_load_dialog() {
    puts("open_load_dialog called")
    open_file_dialog("", "read")
    // will pause in script break until resumed by SetFileDialogResult
    add_callback_string("on_file_dialog_result", on_load_file_dialog_result)
}

/* Эта функция выполняется каждый кадр, callback "frame" */
def framefunc(frameno) {
    keytyper.onframe()  // дать роботу-машинисту сделать свое дело
}

/* Зарегистрировать кадровый колбек */
add_callback("frame", framefunc)

def ends_with(str, tail) 
{
    return str.rfind(tail) == str.size() - tail.size()
}

// TODO: instead of reloading the script, have a call from gdscript to here
// e.g. v06x.CallScriptFunc(...) 
if (scriptargs.size() < 1) {
    on_first_load_byte = open_load_dialog
    attach_bas25_hook()
}
else {
    attach_bas25_hook()

    /* Подгружаем первый файл */
    var file = scriptargs[0]
    if (ends_with(file.toUpperCase(), ".BAS")) {
        load_bas(scriptargs[0])
    }
    else if (ends_with(file.toUpperCase(), ".CAS")) {
        load_cas(scriptargs[0])
    }
    else {
        detach_bas25_hook()
        finalize()
    }

    if (!check_signature(0x2b05, signature_2b05)) {
        //puts("BASIC2.5 seems to be already loaded")
        keytyper.types([
            "\001F3", "F11", 50, "\002F3", 50])
    }

    keytyper.types([
        "F12", 50,
        "C","L","O","A","D","\001Left Shift","2","2","\002Left Shift","Return"])
}
