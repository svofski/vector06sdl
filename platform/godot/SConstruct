#!python
import os, subprocess

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

if Platform() == 'windows':
    env = Environment(tools = ['mingw'])

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'cross-mingw', 'cross-mingw64', 'nuwen-mingw64', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'cross-mingw', 'x11', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'v06x/bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libv06x', PathVariable.PathAccept))

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-headers/"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    if env['target'] in ('debug', 'd'):
        env.Append(CXXFLAGS = ['-std=c++17'])
        env.Append(CCFLAGS = ['-g','-O2'])
        env.Append(CCFLAGS = ['-arch', 'x86_64', '-arch', 'arm64'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64', '-arch', 'arm64'])
    else:
        env.Append(CXXFLAGS = ['-std=c++17'])
        env.Append(CCFLAGS = ['-g','-O3'])
        env.Append(CCFLAGS = ['-arch', 'x86_64', '-arch', 'arm64'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64', '-arch', 'arm64'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-fPIC', '-g3','-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])

elif env['platform'] == "windows":
    env['target_path'] += 'win64/'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV = os.environ)

    env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-D_WINDOWS', '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
    env.Append(CCFLAGS = ['/std:c++20'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd', '-Fe'])
    else:
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])

elif env['platform'] == "cross-mingw":
    #env['ARCH']='i686-w64-mingw32'
    #env['CXX']='x86_64-w64-mingw32-g++'
    env['CXX']='i686-w64-mingw32-g++'
    env['CC']='i686-w64-mingw32-gcc'
    env.Append(CCFLAGS = ['-msse'])
    #env.Append(LINKFLAGS = ['-Wl,-no-undefined', '--enable-runtime-pseudo-reloc', '-limm32', '-lwinmm', '-lversion', '-lws2_32', '-lmswsock', '-static-libgcc', '-static-libstdc++', '-lsetupapi', '-Wl,--subsystem,windows'])
    env.Append(LINKFLAGS = ['-static'])
    env['target_path'] += 'win32/'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV = os.environ)

    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-fPIC', '-g3','-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])

    env['SHLIBSUFFIX'] = '.dll'

    #env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-D_WINDOWS', '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
    #if env['target'] in ('debug', 'd'):
    #    env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd'])
    #else:
    #    env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])

elif env['platform'] == "cross-mingw64":
    env['CXX']='x86_64-w64-mingw32-g++'
    env['CC']='x86_64-w64-mingw32-gcc'
    env.Append(LINKFLAGS = ['-static'])
    env['target_path'] += 'win64/'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV = os.environ)

    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-DWITHOUT_COREDSP=1']) 
        env.Append(CCFLAGS = ['-fPIC', '-g3','-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])
        env.Append(CCFLAGS = ['-DWITHOUT_COREDSP=1']) # scalar implementation of fir is fine, at least on desktop

    env['SHLIBSUFFIX'] = '.dll'

elif env['platform'] == "nuwen-mingw64":
    env['CXX']='g++'
    env['CC']='gcc'
    env.Append(LINKFLAGS = ['-static'])
    env['target_path'] += 'win64/'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV = 'mingw')

    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-DWITHOUT_COREDSP=1']) 
        env.Append(CCFLAGS = ['-fPIC', '-g3','-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])
        env.Append(CCFLAGS = ['-DWITHOUT_COREDSP=1']) # scalar implementation of fir is fine, at least on desktop

    env['SHLIBSUFFIX'] = '.dll'

    #env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-D_WINDOWS', '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
    #if env['target'] in ('debug', 'd'):
    #    env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd'])
    #else:
    #    env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])

# make sure our binding library is properly includes
env.Append(CPPPATH=['.', godot_headers_path,
    '../../fast-filters/sources',
    '../../coreutil/sources',
    '../../boost',
    '../../filters',
    '../../chaiscript/include',
    '../../src'])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CCFLAGS=env['CCFLAGS'] + ['-D__GODOT__', '-DUSED_XXD=1', '-DCHAISCRIPT_NO_THREADS=1'])

env.Append(CPPPATH=['src/','../../src'])
sources = Glob('src/*.cpp')

for f in ['boot/boot.c',
        'boot/boots.c',
        '../../src/options.cpp',
        '../../src/memory.cpp',
        '../../src/tv.cpp',
        '../../src/i8080.cpp',
        '../../src/hal.cpp',
        '../../src/board.cpp',
        '../../src/filler.cpp',
        '../../src/cadence.cpp',
        '../../src/util.cpp',
        '../../src/sound.cpp',
        '../../src/resampler.cpp',
        '../../src/fsimage.cpp',
        '../../src/debug.cpp',
        '../../src/utils_string.cpp',
        '../../src/scriptnik.cpp'
        ]:
    sources += Glob(f)



for f in sources:
    print("Sources=", f.path)

library = env.SharedLibrary(target=env['target_path'] + env['target_name'], source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
